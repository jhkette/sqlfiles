-- delete tables Pubs, Sells, Drinkers and Visits, if they exist

-- DROP TABLE user CASCADE;
-- DROP TABLE item CASCADE;
-- DROP TABLE buys CASCADE;
-- DROP TABLE rates CASCADE;


-- create user table
create table user (
	id int NOT NULL AUTO_INCREMENT,
	name varchar(255) NOT NULL,
	PRIMARY KEY(id)
)ENGINE = Innodb;

-- create item table
create table item (
	id int NOT NULL AUTO_INCREMENT,
	description varchar(255),
	category varchar(255),
	price DECIMAL(10,2),
	PRIMARY KEY(id)
)ENGINE = Innodb;

-- create buys table
-- price is distinct from item price (i.e. not a foriegn key)  as the current price can vary
create table buys (
	user int,
	item int,
	price DECIMAL(10,2),
	foreign key (user) references user(id)  ON DELETE CASCADE ON UPDATE CASCADE ,
	foreign key (item) references item(id) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY (item, user)
)ENGINE = Innodb;

-- create rates table
create table rates (
	user int,
	item int,
	rating tinyint,
	foreign key (user) references user(id) ON UPDATE CASCADE ON DELETE CASCADE,
	foreign key (item) references item(id) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY (user, item)
)ENGINE = Innodb;




-- insert values into user table
INSERT INTO user (name) VALUES ('Steven');
INSERT INTO user (name) VALUES ('Ben');
INSERT INTO user (name) VALUES ('Sally');
INSERT INTO user (name) VALUES ('Kendrick');
INSERT INTO user (name) VALUES ('Taylor');
INSERT INTO user (name) VALUES ('Smith');

-- insert values into item table


INSERT INTO item (description, category, price) VALUES ('macbook', 'computer', 800.00);
INSERT INTO item (description, category, price) VALUES ('computer science book', 'book', 20.00);
INSERT INTO item (description, category, price) VALUES ('fiction book', 'book', 20.00);
INSERT INTO item (description, category, price) VALUES ('history book', 'book', 4.00);
INSERT INTO item (description, category, price) VALUES ('foreign literature book', 'book', 28.00);
INSERT INTO item (description, category, price) VALUES ('potted plant', 'plants', 18.00);
INSERT INTO item (description, category, price) VALUES ('cactus', 'plants', 8.00);
INSERT INTO item (description, category, price) VALUES ('potted flower', 'plants', 8.00);
INSERT INTO item (description, category, price) VALUES ('lamp', 'interior', 38.00);
INSERT INTO item (description, category, price) VALUES ('desk', 'interior', 388.00);
INSERT INTO item (description, category, price) VALUES ('bookcase', 'interior', 288.00);

-- insert values into buys table

INSERT INTO buys (user, item, price) VALUES (1, 1, 800.00);
INSERT INTO buys (user, item, price) VALUES (1, 2, 40.00);
INSERT INTO buys (user, item, price) VALUES (1, 3, 50.00);
INSERT INTO buys (user, item, price) VALUES (1, 4, 50.00);
INSERT INTO buys (user, item, price) VALUES (2, 4, 50.00);
INSERT INTO buys (user, item, price) VALUES (2, 1, 700.00);
INSERT INTO buys (user, item, price) VALUES (3, 10, 700.00);
INSERT INTO buys (user, item, price) VALUES (3, 9, 400.00);
INSERT INTO buys (user, item, price) VALUES (5, 9, 400.00);
INSERT INTO buys (user, item, price) VALUES (5, 8, 90.00);


-- insert values into rates table

INSERT INTO rates (user, item, rating) VALUES (1, 1, 4);
INSERT INTO rates (user, item, rating) VALUES (1, 2, 2);
INSERT INTO rates (user, item, rating) VALUES (1, 3, 5);
INSERT INTO rates (user, item, rating) VALUES (1, 3, 5);
INSERT INTO rates (user, item, rating) VALUES (1, 10, 4);
INSERT INTO rates (user, item, rating) VALUES (2, 1, 4);
INSERT INTO rates (user, item, rating) VALUES (2, 2, 2);
INSERT INTO rates (user, item, rating) VALUES (2, 3, 2);
INSERT INTO rates (user, item, rating) VALUES (2, 10, 2);
INSERT INTO rates (user, item, rating) VALUES (4, 1, 4);
INSERT INTO rates (user, item, rating) VALUES (4, 2, 2);
INSERT INTO rates (user, item, rating) VALUES (4, 3, 5);
INSERT INTO rates (user, item, rating) VALUES (4, 5, 2);
INSERT INTO rates (user, item, rating) VALUES (4, 10, 2);

Q1.
SELECT description FROM item WHERE price < 5;

Q2.
YET TO BE DONE

Q3.
SELECT SUM(price) as total FROM buys 
GROUP BY user
HAVING total > 1000;


04.
SELECT ROUND(AVG(price),2) as total, category FROM item
GROUP BY category;

05. 

SELECT i.description, AVG(r.rating) FROM item  i
LEFT JOIN rates r ON  i.id = r.item
GROUP BY i.description
HAVING AVG(r.rating) IS NULL;

06. 
SELECT COUNT(i.id), i.description FROM item as i
 JOIN buys ON  buys.item = i.id
GROUP BY i.id
ORDER BY COUNT(i.id) DESC LIMIT 3;

07. 
SELECT category, price FROM item
WHERE price > 100 
ORDER BY category ASC, price DESC; 

08.

SELECT same.description, u.name, r.name FROM
(SELECT item.description as description, b.user as user1, v.user as user2
FROM 
buys AS b,
buys AS v
LEFT JOIN item on item.id = v.item
WHERE v.item = b.item
AND v.user <> b.user) same
JOIN user as u ON same.user1 = u.id
JOIN user as r ON same.user2 = r.id; 


09.
SELECT u.name, i.price as original, b.price  as bought
FROM item as i
JOIN buys as b ON i.id = b.item
JOIN user as u ON u.id = b.user
WHERE  b.price > i.price;

10. 
Select u.name, i.description FROM 
user as u 
JOIN buys as b ON u.id = b.user
JOIN item as i ON b.item = i.id
LEFT JOIN rates as r ON r.item = b.item
WHERE r.item IS NULL;

-- we only join first tabe as we don not want nulls in bought table to confuse data,

11. 

Select COUNT(r.item) as ratingnumber, ROUND(AVG(r.rating), 2) as average FROM 
rates as r
GROUP BY r.item
HAVING ratingnumber >= 2;

12.
For each user, find the items which they have not bought, 
and which have the highest average rating.

SELECT user.name, MAX(final.favg) as highestaverage FROM user,
(SELECT b.item as item, b.user as user FROM
buys as b  
) as boughtitems
JOIN (SELECT ROUND(AVG(rates.rating),2) as favg, rates.item as f_item FROM
rates
GROUP BY rates.item) final
ON f_item = boughtitems.item
WHERE user.id != boughtitems.user
GROUP BY user.name;  

